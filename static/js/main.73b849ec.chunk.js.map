{"version":3,"sources":["content.js","context/ThemeContext.js","components/Contact.jsx","components/Trajectory.jsx","App.jsx","serviceWorker.js","index.js"],"names":["content","contact","name","currentRole","age","location","company","image","accounts","github","linkedin","projects","myPortfolio","summary","thumbnail","about","bio","trajectory","role_1","role","description","date","start","Date","end","role_2","role_3","ThemeContext","React","createContext","dark","ThemeProvider","props","useState","state","setState","children","Provider","value","toggleDark","ContactDescription","className","ContactAccounts","keys","Object","map","index","Account","key","url","icon","href","Contact","TrajectoryItem","options","dateStyle","weekday","year","month","startDate","toLocaleDateString","endDate","Trajectory","exp","reverse","ThemeSwitcher","context","useContext","switchTheme","id","onClick","Header","Main","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.73b849ec.chunk.js","sourcesContent":["let content = {\n    contact: {\n        name: \"Antonio Santiago\",\n        currentRole: \"Fullstack Developer\",\n        \n        age: 25,\n        location: \"Zapopan, Jalisco\",\n        company: \"Oracle\",\n\n        image:'/images/me.png'\n    }, \n\n    accounts: {\n        github: 'https://github.com/asantiagot',\n        linkedin: 'https://www.linkedin.com/in/asantiagot/'\n    },\n    \n    projects: {\n        myPortfolio: {\n            name: \"Generic Portfolio Generator\",\n            summary: \"A super easy generator that uses a JSON file to create your portfolio\",\n            thumbnail: \"images/myPortfolio.png\",\n        }\n    },\n\n    about: {\n        bio: \"From Mexico City. My main hobbies are videogames, tennis and coding. I studied Computer Engineering at UNAM, and I joined the Software Engineering industry since 2016.\",\n    }, \n\n    trajectory: {\n        role_1: {\n            company: \"Centro de Investigaciones de DiseÃ±o Industrial\",\n            role: \"Web UI Developer\",\n            description: \"Developed the whole UI of an Academic Platform, in conjunction with the Design team of the Faculty\",\n            date: {\n                start: new Date(\"May 2015\"),\n                end: new Date(\"January 2016\")\n            }\n        }, \n        role_2: {\n            company: \"Oracle\",\n            role: \"Applications Developer\",\n            description: \"Payables Team. Cloud application.\",\n            date: {\n                start: new Date(\"February 2016\"),\n                end: new Date(\"July 2018\")\n            }\n        },\n        role_3: {\n            company: \"Oracle\",\n            role: \"Senior Applications Developer\",\n            description: \"More freedom when working on projects\",\n            date: {\n                start: new Date(\"July 2018\"),\n            }\n        }\n    }\n}\n\nexport default (content);","import React, { useState } from 'react';\n\nconst defaultState = {\n    dark: true\n}\n\nconst ThemeContext = React.createContext(defaultState);\n\nconst ThemeProvider = (props) => {\n    const initialState = {\n        dark: true\n    }\n\n    const [state, setState] = useState(initialState);\n\n    const toggleDark = () => {\n        setState({ dark: !state.dark});\n    };\n\n    const { children } = props;\n    const { dark } = state;\n\n    return (\n        <ThemeContext.Provider\n            value = {{\n                dark,\n                toggleDark: toggleDark\n            }}\n        >\n            { children }\n        </ThemeContext.Provider>\n    )\n}\n\nexport default ThemeContext;\n\nexport { ThemeProvider };","import React from 'react';\n\nfunction Contact(props) {\n    return (\n        <section className=\"contact\">\n            <ContactDescription contact={props.contact} accounts={props.accounts}/>\n            {/* <ContactImage image={props.contact.image}/> */}\n        </section>\n    );\n}\n\nfunction ContactDescription(props) {\n    return (\n        <section className=\"description\">\n        <h1>{props.contact.name}</h1>\n        <h2>{props.contact.currentRole}</h2>\n        {/* <h3>\n            {`${props.contact.age} years old ${props.contact.currentRole} from ${props.contact.location}. Currently working at ${props.contact.company}.`}\n        </h3> */}\n        <ContactAccounts accounts={props.accounts}/>\n        </section>\n    );\n}\n\nfunction ContactAccounts(props) {\n    const keys = Object.keys(props.accounts);\n    return (\n        <section className=\"accountBar\">\n        {keys.map((value, index) => {\n            return(\n            <Account name={value} key={index} url={props.accounts[value]}/>\n            );\n        })}\n        </section>\n    );\n}\n\nfunction Account(props) {\n    const icon = `fab fa-${props.name}`;\n    \n    return (\n        <a href={props.url}>\n            <i className={icon}></i>\n      </a>\n    );\n}\n\nfunction ContactImage(props) {\n    return (\n        <section className=\"image\">\n            <img src={props.image} ></img>\n        </section>\n    );\n}\n\nexport default Contact;","import React from 'react';\n\nfunction TrajectoryItem(props) {\n    const options = {dateStyle: 'short', weekday: 'long', year: 'numeric', month: 'long'};\n    const start = `${props.startDate.toLocaleDateString(\"en-US\", options)}`;\n    const end = props.endDate ? ` - ${props.endDate.toLocaleDateString(\"en-US\", options)}` : ' - today';\n    const date = start + end;\n    return(\n      <section className=\"trajectoryItem\">\n        <div className=\"trajectoryHeading\">\n          <h3 className=\"company\">{props.company}</h3>\n          <h3>{`(${date})`}</h3>\n        </div>\n        <h4 className=\"role\">{props.role}</h4>\n        <p>{props.description}</p>\n      </section>\n    );\n  }\n  \n  function Trajectory(props) {\n    const exp = Object.keys(props.trajectory);\n    exp.reverse();\n    return(\n      <section className=\"trajectory\">\n        <h2>Trajectory</h2>\n        {exp.map((value, index) => {\n          return (\n            <TrajectoryItem exp={value} \n                            key={index} \n                            company={props.trajectory[value].company}\n                            role={props.trajectory[value].role}\n                            description={props.trajectory[value].description}\n                            startDate={props.trajectory[value].date.start}\n                            endDate={props.trajectory[value].date.end}\n                            />\n          );\n        })}\n    </section>\n    );\n  }\n\n  export default Trajectory;","import React, { useContext } from \"react\";\n// import {hot} from \"react-hot-loader\";\nimport content from \"./content\";\nimport ThemeContext, { ThemeProvider } from \"./context/ThemeContext\";\nimport NavigationBar from \"./components/NavigationBar\";\nimport Contact from \"./components/Contact\";\nimport Trajectory from \"./components/Trajectory\";\n\nfunction ThemeSwitcher(props) {\n  const context = useContext(ThemeContext);\n  const switchTheme = () => {\n    context.toggleDark();\n  }\n  \n  return (context.dark ? \n    <button id=\"themeSwitcher\" onClick={switchTheme}>ð</button> \n    : \n    <button id=\"themeSwitcher\" onClick={switchTheme}>ð</button>\n  );\n}\n\nfunction PortfolioShowcase() { \n  return (\n    <section className=\"projects\">\n      {/* <h2>{content.projects.length > 1 ? `This is a list of the projects I've worked on:` : `This is the project I've worked on:`}</h2> */}\n      <h2>{`A cool site in progress! :)`}</h2>\n    </section>\n  );\n}\n\nfunction Header(props) {\n  return (\n    <div className=\"header\">\n      <Contact contact={props.contact} accounts={props.accounts}/>\n      <ThemeSwitcher/>\n    </div>\n  )\n}\n\nfunction Main(props) {\n  return(\n    <main className=\"main\">\n      <Header contact={props.content.contact} accounts={props.content.accounts}/>\n      {/* <PortfolioShowcase/> */}\n      <Trajectory trajectory={props.content.trajectory}/>\n    </main>\n  );\n}\n\nfunction App() {\n  return (\n      <ThemeProvider>\n        <Main content={content}/>\n      </ThemeProvider>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById(\"root\")\n)\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}